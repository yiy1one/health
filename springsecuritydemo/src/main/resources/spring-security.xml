<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://code.alibabatech.com/schema/dubbo
                        http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">

    <!--
        http：用于定义相关权限控制
        auto-config：是否自动配置，可以提供一些自动化的配置。
                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                        设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->
    <security:http security="none" pattern="/login.html"/>
    <security:http security="none" pattern="/favicon.ico"></security:http>
    <security:http auto-config="true" use-expressions="true">
        <!--
            intercept-url：定义一个拦截规则
            pattern：对哪些url进行权限控制，/**表示对所有的url请求都要先进行权限的认证，只有认证通过才可以继续访问。
            access：表示拥有什么角色才能进行访问对应的URL，hasRole是就是一个表达式，hasRole('ROLE_ADMIN')表示用户必须拥有ROLE_ADMIN角色才能对URL进行访问，目前可以写死，后期可以从数据库中查询出来。
       -->
        <security:intercept-url pattern="/**"  access="hasRole('ROLE_ADMIN')" />
        <security:form-login login-page="/login.html" username-parameter="username" password-parameter="password"
                             login-processing-url="/login.do" default-target-url="/index.html"
                             always-use-default-target="true" authentication-failure-url="/login.html"></security:form-login>
<!--        <security:csrf disabled="true"/>-->
    </security:http>

    <!--
        authentication-manager：认证管理器，用于处理认证操作。
    -->
    <security:authentication-manager>
        <!--
            authentication-provider：认证提供者，执行具体的认证逻辑
        -->
        <security:authentication-provider>
            <!--
                user-service：用于获取用户信息，提供给authentication-provider进行认证
            -->
            <security:user-service>
                <!--
                    user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息
                  	{noop}：表示当前使用的密码为明文，没有被加密过
			表示只要使用用户名:admin，密码是明文的admin进行登陆的用户，就给该用户赋予ROLE_ADMIN的角色
                -->
                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"></security:user>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
</beans>
